diff --git i/config.def.h w/config.def.h
index 80fe9b9..752a2e2 100644
--- i/config.def.h
+++ w/config.def.h
@@ -97,6 +97,9 @@ char *termname = "st-256color";
  */
 unsigned int tabspaces = 8;
 
+/* bg opacity */
+float alpha = 0.8;
+
 /* Terminal colors (16 first used in escape sequence) */
 static const char *colorname[] = {
     /* 8 normal colors */
@@ -469,4 +472,4 @@ static char ascii_printable[] =
     "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"
     "`abcdefghijklmnopqrstuvwxyz{|}~";
 
-// Last Modified: Thu, 30 Jan 2025 11:17:59 AM
+// Last Modified: Thu, 30 Jan 2025 11:22:05 AM
diff --git i/x.c w/x.c
index 7a930f2..64d54a6 100644
--- i/x.c
+++ w/x.c
@@ -105,6 +105,7 @@ typedef struct {
     XSetWindowAttributes attrs;
     int scr;
     int isfixed; /* is fixed geometry? */
+    int depth; /* bit depth */
     int l, t; /* left and top offset */
     int gm; /* geometry mask */
 } XWindow;
@@ -755,7 +756,7 @@ xresize(int col, int row)
 
     XFreePixmap(xw.dpy, xw.buf);
     xw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,
-            DefaultDepth(xw.dpy, xw.scr));
+            xw.depth);
     XftDrawChange(xw.draw, xw.buf);
     xclear(0, 0, win.w, win.h);
 
@@ -815,6 +816,9 @@ xloadcols(void)
             else
                 die("could not allocate color %d\n", i);
         }
+    dc.col[defaultbg].color.alpha = (unsigned short)(0xffff * alpha);
+    dc.col[defaultbg].pixel &= 0x00FFFFFF;
+    dc.col[defaultbg].pixel |= (unsigned char)(0xff * alpha) << 24;
     loaded = 1;
 }
 
@@ -845,6 +849,12 @@ xsetcolorname(int x, const char *name)
     XftColorFree(xw.dpy, xw.vis, xw.cmap, &dc.col[x]);
     dc.col[x] = ncolor;
 
+    if (x == defaultbg) {
+        dc.col[defaultbg].color.alpha = (unsigned short)(0xffff * alpha);
+        dc.col[defaultbg].pixel &= 0x00FFFFFF;
+        dc.col[defaultbg].pixel |= (unsigned char)(0xff * alpha) << 24;
+    }
+
     return 0;
 }
 
@@ -1232,11 +1242,25 @@ xinit(int cols, int rows)
     Window parent, root;
     pid_t thispid = getpid();
     XColor xmousefg, xmousebg;
+    XWindowAttributes attr;
+    XVisualInfo vis;
 
     if (!(xw.dpy = XOpenDisplay(NULL)))
         die("can't open display\n");
     xw.scr = XDefaultScreen(xw.dpy);
-    xw.vis = XDefaultVisual(xw.dpy, xw.scr);
+
+    root = XRootWindow(xw.dpy, xw.scr);
+    if (!(opt_embed && (parent = strtol(opt_embed, NULL, 0))))
+        parent = root;
+
+    if (XMatchVisualInfo(xw.dpy, xw.scr, 32, TrueColor, &vis) != 0) {
+        xw.vis = vis.visual;
+        xw.depth = vis.depth;
+    } else {
+        XGetWindowAttributes(xw.dpy, parent, &attr);
+        xw.vis = attr.visual;
+        xw.depth = attr.depth;
+    }
 
     /* font */
     if (!FcInit())
@@ -1249,7 +1273,7 @@ xinit(int cols, int rows)
     xloadsparefonts();
 
     /* colors */
-    xw.cmap = XDefaultColormap(xw.dpy, xw.scr);
+    xw.cmap = XCreateColormap(xw.dpy, parent, xw.vis, None);
     xloadcols();
 
     /* adjust fixed window geometry */
@@ -1269,11 +1293,8 @@ xinit(int cols, int rows)
         | ButtonMotionMask | ButtonPressMask | ButtonReleaseMask;
     xw.attrs.colormap = xw.cmap;
 
-    root = XRootWindow(xw.dpy, xw.scr);
-    if (!(opt_embed && (parent = strtol(opt_embed, NULL, 0))))
-        parent = root;
-    xw.win = XCreateWindow(xw.dpy, root, xw.l, xw.t,
-            win.w, win.h, 0, XDefaultDepth(xw.dpy, xw.scr), InputOutput,
+    xw.win = XCreateWindow(xw.dpy, parent, xw.l, xw.t,
+            win.w, win.h, 0, xw.depth, InputOutput,
             xw.vis, CWBackPixel | CWBorderPixel | CWBitGravity
             | CWEventMask | CWColormap, &xw.attrs);
     if (parent != root)
@@ -1284,7 +1305,7 @@ xinit(int cols, int rows)
     dc.gc = XCreateGC(xw.dpy, xw.win, GCGraphicsExposures,
             &gcvalues);
     xw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,
-            DefaultDepth(xw.dpy, xw.scr));
+            xw.depth);
     XSetForeground(xw.dpy, dc.gc, dc.col[defaultbg].pixel);
     XFillRectangle(xw.dpy, xw.buf, dc.gc, 0, 0, win.w, win.h);
 
@@ -2148,6 +2169,10 @@ main(int argc, char *argv[])
     case 'a':
         allowaltscreen = 0;
         break;
+    case 'A':
+        alpha = strtof(EARGF(usage()), NULL);
+        LIMIT(alpha, 0.0, 1.0);
+        break;
     case 'c':
         opt_class = EARGF(usage());
         break;
@@ -2208,4 +2233,4 @@ run:
     return 0;
 }
 
-// Last Modified: Thu, 30 Jan 2025 10:47:30 AM
+// Last Modified: Thu, 30 Jan 2025 11:28:08 AM
